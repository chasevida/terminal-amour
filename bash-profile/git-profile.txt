##############################
## Git Specifics
##############################
if [ -f ~/.git-completion.bash ]; then
	source ~/.git-completion.bash
fi

# Git branch in prompt.
parse_git_branch() {
   git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ [\1]/'
}



# The various escape codes that we can use to color our prompt.
        RED="\[\033[0;31m\]"
     YELLOW="\[\033[1;33m\]"
      GREEN="\[\033[0;32m\]"
       BLUE="\[\033[1;34m\]"
  LIGHT_RED="\[\033[1;31m\]"
LIGHT_GREEN="\[\033[1;32m\]"
      WHITE="\[\033[1;37m\]"
 LIGHT_GRAY="\[\033[0;37m\]"
 COLOR_NONE="\[\e[0m\]"


# Detect whether the current directory is a git repository.
function is_git_repository {
  git branch > /dev/null 2>&1
}

function get_git_branch {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

# Determine the branch/state information for this git repository.
function set_git_branch {

  # Capture the output of the "git status" command.
  git_status="$(git status 2> /dev/null)"
 
  # Set color based on clean/staged/dirty.
  if [[ ${git_status} =~ "working directory clean" ]]; then
    state="${GREEN}"
  elif [[ ${git_status} =~ "Changes to be committed" ]]; then
    state="${BLUE}"
  else
    state="${LIGHT_RED}"
  fi

  if [ $(get_git_branch) ]
  then
    branch="$(get_git_branch)"
  else
    branch="master"
  fi

 
  # Set the final branch string.
  BRANCH="${state}[${branch}]${COLOR_NONE} "
}

# Set the full bash prompt.
function set_bash_prompt () {

  # Set name & hostname - nice when using ssh
  if [ -n "$SSH_CLIENT" ]; then
    HOSTNAME_PREFIX="${BLUE}[$(id -un)@$(hostname)]${COLOR_NONE}: "
  else
    HOSTNAME_PREFIX=""
  fi
 
  # Set the BRANCH variable.
  if is_git_repository ; then
    set_git_branch
  else
    BRANCH=''
  fi

  PS1="${HOSTNAME_PREFIX}\W ${BRANCH}$ "
}
 
# Tell bash to execute this function just before displaying its prompt.
PROMPT_COMMAND=set_bash_prompt

